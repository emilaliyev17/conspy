"""
Django settings for financial_consolidator project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-sss5b85re(%mvy5nz@8p&hqqy_z0ow)bt&r$yr_=&9&^=rqp9$')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Allowed hosts: read from env, with DO fallback
ALLOWED_HOSTS = [h.strip() for h in os.environ.get('ALLOWED_HOSTS', '').split(',') if h.strip()]
if not ALLOWED_HOSTS:
    # Fallback for DigitalOcean App Platform and local dev
    ALLOWED_HOSTS = ['.ondigitalocean.app', 'localhost', '127.0.0.1']

# CSRF Trusted Origins for DigitalOcean
CSRF_TRUSTED_ORIGINS = [
    'https://*.ondigitalocean.app',
    'http://*.ondigitalocean.app',
]

# Optionally add a specific host from env (e.g., custom domain)
if 'DJANGO_ALLOWED_HOST' in os.environ:
    CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ['DJANGO_ALLOWED_HOST']}")


# Application definition

INSTALLED_APPS = [
    # Admin interface theme apps must come BEFORE 'django.contrib.admin'
    'admin_interface',
    'colorfield',

    # Django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Project apps
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'financial_consolidator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'financial_consolidator.wsgi.application'


# Database configuration
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Production - use DATABASE_URL from environment
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Local development - use existing PostgreSQL config
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'consolidator_db',
            'USER': 'emil.aliyev',
            'PASSWORD': '',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Add this for production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
] if os.path.exists(os.path.join(BASE_DIR, 'static')) else []

# Media files (if needed)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Feature flags infrastructure
# Flags can be overridden via env var FEATURE_FLAGS as comma-separated key=true pairs, e.g.:
# FEATURE_FLAGS="PL_BUDGET_PARALLEL=true,USE_NEW_CF_SAVE=false"
FEATURE_FLAGS = {
    'PL_BUDGET_PARALLEL': False,
    'USE_NEW_CF_SAVE': True,
}

_env_flags = os.getenv('FEATURE_FLAGS', '')
if _env_flags:
    for pair in _env_flags.split(','):
        if '=' in pair:
            k, v = pair.split('=', 1)
            k = k.strip()
            v = v.strip().lower()
            if k:
                FEATURE_FLAGS[k] = v in ('1', 'true', 'yes', 'on')
PL_BUDGET_PARALLEL = True

# Allow admin interface to work properly in iframes
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Security cookies and SSL in production
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    # SECURE_SSL_REDIRECT = True  # Removed to prevent redirect loop behind DO proxy
    # Use proxy header to detect HTTPS correctly on DigitalOcean
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
